"use client"
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: bazylevnik0 (https://sketchfab.com/bazylevnik0)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/astronaut-4ad51bb1b5ac4485a0e9dcb0eb36222a
Title: astronaut
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import * as THREE from 'three'

export function SmallAsturante(props) {
  const { nodes, materials, scene } = useGLTF('/assets/3d/zxc/scene.gltf')
  const groupRef = useRef()
  const { mouse } = useThree()
  
  // Load textures manually from the textures folder
  const textures = useTexture({
    // Material 0 textures
    material0Diffuse: '/assets/3d/zxc/textures/material_0_diffuse.png',
    material0Normal: '/assets/3d/zxc/textures/material_0_normal.png',
    material0Occlusion: '/assets/3d/zxc/textures/material_0_occlusion.png',
    material0Specular: '/assets/3d/zxc/textures/material_0_specularGlossiness.png',
    // Material 2 textures
    material2Diffuse: '/assets/3d/zxc/textures/material_2_diffuse.png',
    material2Normal: '/assets/3d/zxc/textures/material_2_normal.png',
    material2Occlusion: '/assets/3d/zxc/textures/material_2_occlusion.png',
    material2Specular: '/assets/3d/zxc/textures/material_2_specularGlossiness.png',
  })
  
  // References to specific bones for animation
  const bonesRef = useRef({
    head: null,
    leftArm: null,
    rightArm: null,
    leftElbow: null,
    rightElbow: null,
    leftWrist: null,
    rightWrist: null,
    leftThigh: null,
    rightThigh: null,
    leftKnee: null,
    rightKnee: null,
  })

  // Find and map bones
  useEffect(() => {
    console.log('Available nodes:', Object.keys(nodes))
    console.log('Available materials:', Object.keys(materials))
    
    // Map bones by their actual names from the console output
    bonesRef.current.head = nodes['head42_45']
    bonesRef.current.leftArm = nodes['L_Arm10_13']
    bonesRef.current.rightArm = nodes['R_Arm44_47']
    bonesRef.current.leftElbow = nodes['L_Elbow11_14']
    bonesRef.current.rightElbow = nodes['R_Elbow45_48']
    bonesRef.current.leftWrist = nodes['L_Wrist12_15']
    bonesRef.current.rightWrist = nodes['R_Wrist46_49']
    bonesRef.current.leftThigh = nodes['L_Thigh82_85']
    bonesRef.current.rightThigh = nodes['R_Thigh88_91']
    bonesRef.current.leftKnee = nodes['L_Knee83_86']
    bonesRef.current.rightKnee = nodes['R_Knee89_92']
    
    console.log('Mapped bones:', bonesRef.current)
  }, [nodes])

  // Animation loop
  useFrame((state) => {
    const time = state.clock.elapsedTime
    const bones = bonesRef.current

    // Head follows mouse
    if (bones.head) {
      const targetRotationY = mouse.x * 0.4  // Left/right rotation
      const targetRotationX = mouse.y * 0.3  // Up/down rotation
      
      bones.head.rotation.y = THREE.MathUtils.lerp(
        bones.head.rotation.y,
        targetRotationY,
        0.1
      )
      bones.head.rotation.x = THREE.MathUtils.lerp(
        bones.head.rotation.x,
        targetRotationX,
        0.1
      )
    }

    // Space-like floating animation for arms
    if (bones.leftArm) {
      bones.leftArm.rotation.z = Math.sin(time * 0.6) * 0.3 + 0.2
      bones.leftArm.rotation.x = Math.cos(time * 0.4) * 0.15
    }
    
    if (bones.rightArm) {
      bones.rightArm.rotation.z = Math.sin(time * 0.5 + Math.PI) * 0.3 - 0.2
      bones.rightArm.rotation.x = Math.cos(time * 0.45 + Math.PI) * 0.15
    }

    // Elbow floating
    if (bones.leftElbow) {
      bones.leftElbow.rotation.y = Math.sin(time * 0.7) * 0.2
    }
    
    if (bones.rightElbow) {
      bones.rightElbow.rotation.y = Math.sin(time * 0.65 + Math.PI) * 0.2
    }

    // Wrist floating
    if (bones.leftWrist) {
      bones.leftWrist.rotation.z = Math.sin(time * 0.8) * 0.15
    }
    
    if (bones.rightWrist) {
      bones.rightWrist.rotation.z = Math.sin(time * 0.75 + Math.PI) * 0.15
    }

    // Position legs straight down towards the bottom
    // if (bones.leftThigh) {
    //   bones.leftThigh.rotation.y = 0  // Keep straight
    //   bones.leftThigh.rotation.z = 180  // Keep straight
    // }
    
    // if (bones.rightThigh) {
    //   bones.rightThigh.rotation.y = 0  // Keep straight
    //   bones.rightThigh.rotation.z =180  // Keep straight
    // }

    // Keep knees straight too - no bending
    if (bones.leftKnee) {
      bones.leftKnee.rotation.x = 0  // Keep straight
      bones.leftKnee.rotation.y = 0  // Keep straight
      bones.leftKnee.rotation.z = 0  // Keep straight
    }
    
    if (bones.rightKnee) {
      bones.rightKnee.rotation.x = 0  // Keep straight
      bones.rightKnee.rotation.y = 0  // Keep straight
      bones.rightKnee.rotation.z = 0  // Keep straight
    }

    // Overall gentle floating movement
    if (groupRef.current) {
      groupRef.current.position.y = Math.sin(time * 0.5) * 0.05
      groupRef.current.rotation.z = Math.sin(time * 0.3) * 0.01
    }
  })

  // Apply textures manually to ensure they're visible
  useEffect(() => {
    if (scene && materials && textures) {
      scene.traverse((child) => {
        if (child.isMesh && child.material) {
          const materialName = child.material.name
          console.log('Processing mesh with material:', materialName)
          
          // Apply textures based on material name
          if (materialName === 'material_0' || materialName.includes('material_0')) {
            // Create new material with textures for material_0
            const newMaterial = new THREE.MeshStandardMaterial({
              map: textures.material0Diffuse,
              normalMap: textures.material0Normal,
              aoMap: textures.material0Occlusion,
              roughnessMap: textures.material0Specular,
              metalnessMap: textures.material0Specular,
            })
            child.material = newMaterial
            console.log('✅ Applied material_0 textures')
            
          } else if (materialName === 'material_2' || materialName.includes('material_2')) {
            // Create new material with textures for material_2
            const newMaterial = new THREE.MeshStandardMaterial({
              map: textures.material2Diffuse,
              normalMap: textures.material2Normal,
              aoMap: textures.material2Occlusion,
              roughnessMap: textures.material2Specular,
              metalnessMap: textures.material2Specular,
            })
            child.material = newMaterial
            console.log('✅ Applied material_2 textures')
            
          } else if (materialName === 'material_1' || materialName.includes('material_1')) {
            // For material_1, use the original material or create a basic one
            if (materials[materialName]) {
              child.material = materials[materialName]
            }
            console.log('✅ Applied material_1 (original)')
          }
          
          // Ensure the material is updated
          child.material.needsUpdate = true
        }
      })
    }
  }, [scene, materials, textures])

  return (
    <group ref={groupRef} {...props} dispose={null}>
      {/* Use primitive to render the complete scene with all textures intact */}
      <primitive object={scene} />
    </group>
  )
}

useGLTF.preload('/assets/3d/zxc/scene.gltf')

